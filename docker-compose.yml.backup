# Dragon Dictation Pro v7.0 - Docker Compose Configuration
# No version tag needed for modern Docker Compose

services:
  # Service 1: PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: central_postgres_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # Mount init script directory for easy schema updates
      - ./database_schema.sql:/docker-entrypoint-initdb.d/schema.sql:ro
    ports:
      - "5432:5432"
    networks:
      - services_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Service 2: Dragon Dictation Pro AI Service (v7.0)
  dragon_dictation:
    build:
      context: ./dragon_dictation_pro
      dockerfile: Dockerfile
    image: dragon_dictation_pro:7.0
    container_name: dragon_ai_service
    restart: unless-stopped
    environment:
      # AI Configuration
      GOOGLE_API_KEY: ${GOOGLE_API_KEY}
      
      # Optional: Performance tuning
      WHISPER_MODEL: ${WHISPER_MODEL:-medium.en}
      COMPUTE_TYPE: ${COMPUTE_TYPE:-float16}
      
      # Database connection (for future direct integration)
      POSTGRES_HOST: postgres
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "5005:5005"
    networks:
      - services_network
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      # Persist metrics data
      - metrics_data:/app/metrics
      # Optional: Mount config for hot-reload during development
      # - ./dragon_dictation_pro/config:/app/config:ro
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "python3", "-c", "import requests; requests.get('http://localhost:5005/', timeout=5)"]
      interval: 30s
      timeout: 10s
      start_period: 60s
      retries: 3

volumes:
  postgres_data:
    driver: local
  metrics_data:
    driver: local

networks:
  services_network:
    driver: bridge